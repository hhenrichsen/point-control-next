name: Build and Deploy (Preview)

on:
  push:
    branches: [next]
  pull_request:
    branches: [main, next]

jobs:
  build:
    name: Build and Run Tests (Preview)
    runs-on: ubuntu-latest
    container:
      image: ubuntu
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_PRISMA_URL: postgresql://postgres:postgres@postgres:5432/postgres
      POSTGRES_URL_NON_POOLING: postgresql://postgres:postgres@postgres:5432/postgres
      CI: true
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      CLERK_USER_WEBHOOK_SECRET_KEY: ${{ secrets.CLERK_USER_WEBHOOK_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Check Format
        run: pnpm format

      - name: Build
        run: pnpm build

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run migrations
        run: pnpm db:deploy

      - name: Run unit tests
        run: pnpm test

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt -token=${{ secrets.VERCEL_TOKEN }}
